====

REFERENCE DOCUMENTATION MANAGEMENT

You implement a systematic approach to reference documentation management using the hierarchical directory structure:

## Reference Documentation Detection
1. Determine the appropriate path based on technology type:
   - Languages: reference-docs/languages/[language]/
   - Frameworks: reference-docs/languages/[language]/[frontend|backend]/ or reference-docs/frameworks/
   - Databases: reference-docs/databases/[type]/
   - Cloud: reference-docs/cloud/[category]/
   - Tools: reference-docs/tools/[category]/

2. Look for version-specific files within that path:
   - Format: [technology]-v[version].md
   - Example: reference-docs/languages/javascript/frontend/react/react-v18.md

3. Prioritize documentation needs:
   - Core language/framework components are highest priority
   - Databases and cloud services are medium priority
   - Utility libraries and tools are lower priority

## Using ask_perplexity for Documentation Creation
When reference documentation is missing and the ask_perplexity MCP server is available:

1. Check if ask_perplexity is available:
   ```
   IF the MCP servers section mentions "mcp-perplexity" AND includes "ask_perplexity" tool:
     - Use ask_perplexity for documentation creation
   ELSE:
     - Provide manual documentation creation guidance
   ```

2. Create documentation with ask_perplexity using this format:
   ```
   <use_mcp_tool>
   <server_name>mcp-perplexity</server_name>
   <tool_name>ask_perplexity</tool_name>
   <arguments>
   {
     "query": "Create comprehensive reference documentation for [TECHNOLOGY] version [VERSION] following this schema:\n\n# [TECHNOLOGY] v[VERSION]\n\n## Overview\n[Provide a brief overview of the technology and its main features]\n\n## Key Concepts\n- [List and explain key concepts and core abstractions]\n- [Focus on the most important paradigms]\n\n## Main Components\n- [Component 1]: [Description]\n- [Component 2]: [Description]\n\n## Common Patterns\n- [Pattern 1]: [Description with brief code example]\n- [Pattern 2]: [Description with brief code example]\n\n## Best Practices\n- [Best practice 1]\n- [Best practice 2]\n\n## Anti-patterns\n- [Anti-pattern 1]: [Why it's problematic and alternative]\n- [Anti-pattern 2]: [Why it's problematic and alternative]\n\n## Version-Specific Features\n- [Feature 1 specific to this version]\n- [Feature 2 specific to this version]\n\n## Differences From Previous Version\n- [Major change 1]\n- [Major change 2]\n\n## Common Libraries/Extensions\n- [Library 1]: [Purpose and typical usage]\n- [Library 2]: [Purpose and typical usage]\n\n## Resources\n- [Official Documentation](URL)\n- [Community Resources](URL)"
   }
   </arguments>
   </use_mcp_tool>
   ```

3. After receiving the response:
   - Validate that all required sections are present
   - Check for technical accuracy and completeness
   - Determine proper path in hierarchical structure
   - Recommend saving to appropriate location

4. When ask_perplexity is not available:
   - Provide the schema template from 00-schema.md
   - Guide the user through manual documentation creation
   - Explain proper placement in directory structure

## Documentation Validation Criteria
Validate documentation against these requirements:

1. Required Sections:
   - Title with version
   - Overview
   - Key Concepts
   - Main Components
   - Common Patterns
   - Best Practices
   - Anti-patterns
   - Version-Specific Features
   - Differences From Previous Version

2. Quality Criteria:
   - Technical accuracy
   - Comprehensiveness
   - Version-specific details
   - Practical examples
   - Clear explanations

## Version Handling Protocol
For managing version-specific documentation:

1. Exact version match → use directly
   - Example: react-v18.md for React 18.0.0
2. Close version match → use with version difference warning
   - Example: react-v18.md for React 18.2.0
3. Major version mismatch → create new documentation
   - Example: Need react-v19.md when only react-v18.md exists
4. Unknown version → request version identification
   - Use package files to determine version where possible