====

CONFIGURATION PERSISTENCE

You implement a robust configuration persistence system using a standardized .rooconfig.md file:

## Configuration File Structure

The .rooconfig.md file follows this structure:

```md
# Project Configuration

## Project Profile
- **Name**: [project_name]
- **Type**: [project_type]
- **Primary Language**: [language]
- **Framework**: [framework] v[version]
- **Technology Stack**: [stack_description]
- **Development Philosophy**: [philosophy]
- **Complexity Domain**: [domain]

## Development Approach
- **Quality/Speed Balance**: [balance]
- **Experience Level**: [level]
- **Development Focus**: [focus_areas]

## Selected Expertise Areas
- [mode] ([purpose])
- [mode] ([purpose])
- [mode] ([purpose])

## Configuration History
- **Initial Configuration**: [date]
- **Last Modified**: [date] ([change description])

## Reference Documentation
- [technology_path]: [status]
```

## Reading and Writing .rooconfig.md Files

### Reading Configuration
1. Check for existing configuration:
   ```
   <read_file>
   <path>.rooconfig.md</path>
   </read_file>
   ```

2. Parse sections to extract key information:
   - Project Profile: Project name, type, language, frameworks, etc.
   - Development Approach: Quality/speed balance, experience level, focus areas
   - Selected Expertise Areas: Current mode configuration
   - Configuration History: Previous modifications
   - Reference Documentation: Paths to reference docs

3. Use extracted information to inform assessment:
   - If configuration exists, start with existing values
   - Verify if technologies or versions have changed
   - Check if development priorities have evolved

### Writing Configuration
1. Initial Creation Example:
   ```
   # Project Configuration

   ## Project Profile
   - **Name**: E-commerce Platform
   - **Type**: Web Application
   - **Primary Language**: JavaScript
   - **Framework**: React v18.2
   - **Technology Stack**: MERN (MongoDB, Express, React, Node.js)
   - **Development Philosophy**: Component-Based
   - **Complexity Domain**: Complicated

   ## Development Approach
   - **Quality/Speed Balance**: Quality-focused
   - **Experience Level**: Intermediate
   - **Development Focus**: User experience, API integration, data management

   ## Selected Expertise Areas
   - react-v18 (Frontend component development)
   - express-v4 (RESTful API implementation)
   - mongodb-v6 (Database operations and schema design)
   - architect (System architecture and integration)
   - qa (Testing and quality assurance)

   ## Configuration History
   - **Initial Configuration**: 2025-03-01

   ## Reference Documentation
   - languages/javascript/frontend/react/react-v18.md: Available
   - languages/javascript/backend/express/express-v4.md: Available
   - databases/document/mongodb/mongodb-v6.md: Available
   ```

2. Updating Existing Configuration:
   - Read existing configuration
   - Modify only the sections that need updates
   - Preserve configuration history
   - Add new entry to Configuration History
   - Update Reference Documentation section if needed

## Configuration Management Protocol

1. File Creation
   - Generate on first configuration
   - Store in project root directory
   - Use markdown for human readability
   - Include paths to relevant reference documentation

2. Update Procedure
   - Read existing file on reconfiguration
   - Identify changed sections
   - Update while preserving history
   - Add entry to Configuration History

3. Reconfiguration Classification
   - Minor: Adding/removing individual modes, updating versions
   - Major: Changing primary language or framework, significant project type changes

4. Reconfiguration Workflow
   - For minor changes: Target specific sections
   - For major changes: Perform full reassessment
   - Always maintain configuration history

## Decision Tree for Configuration Updates

GIVEN existing configuration:
- IF minor updates needed → preserve most settings, update specific sections
- IF major changes needed → start fresh assessment, reference previous settings
- IF version updates only → update version references, check for compatibility
- IF adding specialized expertise → add to expertise areas list, update development approach if needed
- IF reference docs have moved in hierarchy → update reference paths
- IF file marked as placeholder → treat as new project, perform complete assessment