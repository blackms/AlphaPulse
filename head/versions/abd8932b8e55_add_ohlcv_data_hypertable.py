"""Add ohlcv_data hypertable

Revision ID: abd8932b8e55
Revises: 
Create Date: 2025-04-07 11:14:58.742229

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'abd8932b8e55'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - manually adjusted for TimescaleDB PK ###
    op.create_table('ohlcv_data',
    # sa.Column('id', sa.Integer(), nullable=False), # Removed ID PK
    sa.Column('exchange', sa.String(length=50), nullable=False),
    sa.Column('symbol', sa.String(length=20), nullable=False), # Part of composite PK
    sa.Column('timeframe', sa.String(length=10), nullable=False), # Part of composite PK
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False), # Part of composite PK
    sa.Column('open', sa.Float(), nullable=False),
    sa.Column('high', sa.Float(), nullable=False),
    sa.Column('low', sa.Float(), nullable=False),
    sa.Column('close', sa.Float(), nullable=False),
    sa.Column('volume', sa.Float(), nullable=False),
    # Define composite primary key compatible with TimescaleDB partitioning
    sa.PrimaryKeyConstraint('timestamp', 'symbol', 'timeframe', name=op.f('pk_ohlcv_data_ts_sym_tf')),
    schema='backtesting'
    )
    # Keep other indexes if needed, but timestamp is already indexed by PK/hypertable
    op.create_index(op.f('ix_backtesting_ohlcv_data_exchange'), 'ohlcv_data', ['exchange'], unique=False, schema='backtesting')
    # op.create_index(op.f('ix_backtesting_ohlcv_data_symbol'), 'ohlcv_data', ['symbol'], unique=False, schema='backtesting') # Covered by PK
    # op.create_index(op.f('ix_backtesting_ohlcv_data_timestamp'), 'ohlcv_data', ['timestamp'], unique=False, schema='backtesting') # Covered by PK/Hypertable
    # ### end Alembic commands ###

    # ### Add TimescaleDB hypertable creation ###
    # Note: Ensure the TimescaleDB extension is enabled in the database first!
    # CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;
    op.execute("SELECT create_hypertable('backtesting.ohlcv_data', 'timestamp');")
    # Optional: Add partitioning on symbol as well (adjust number_partitions as needed)
    # op.execute("SELECT create_hypertable('backtesting.ohlcv_data', 'timestamp', partitioning_column => 'symbol', number_partitions => 4);")
    # ### End TimescaleDB command ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - manually adjusted ###
    # Drop hypertable first (if exists - TimescaleDB might handle this, but explicit is safer)
    # op.execute("DROP TABLE backtesting.ohlcv_data;") # This might fail if it's a hypertable - need specific TimescaleDB drop? Check docs.
    # Simpler downgrade: just drop the table, assuming clean slate on rollback/downgrade.
    op.drop_index(op.f('ix_backtesting_ohlcv_data_exchange'), table_name='ohlcv_data', schema='backtesting')
    op.drop_table('ohlcv_data', schema='backtesting')
    # ### end Alembic commands ###
