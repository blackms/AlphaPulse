name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      EXCHANGE_API_KEY: ${{ secrets.EXCHANGE_API_KEY }}
      EXCHANGE_API_SECRET: ${{ secrets.EXCHANGE_API_SECRET }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: "3.11"
        channels: conda-forge,defaults
        channel-priority: strict
        activate-environment: test-env
    
    - name: Setup Package Structure
      run: |
        # Create models directory and files
        mkdir -p src/alpha_pulse/models
        
        # Create __init__.py
        echo '''"""
        Machine learning models package for AlphaPulse.
        """
        from .basic_models import ModelTrainer
        __all__ = ["ModelTrainer"]
        ''' > src/alpha_pulse/models/__init__.py
        
        # Create basic_models.py
        echo '''"""
        Basic machine learning models for AlphaPulse.
        """
        from typing import Dict, Optional, Union
        from pathlib import Path
        from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier

        class ModelTrainer:
            def __init__(
                self,
                model_type: str = "random_forest",
                task: str = "regression",
                model_params: Optional[Dict] = None,
                model_dir: Optional[Union[str, Path]] = None
            ):
                self.model_type = model_type
                self.task = task
                self.model_params = model_params or {}
                self.model_dir = Path(model_dir) if model_dir else Path.cwd() / "models"
                self._model = None
                self._is_fitted = False
        ''' > src/alpha_pulse/models/basic_models.py
        
        # Show directory structure
        echo "Package structure:"
        ls -R src/alpha_pulse/
    
    - name: Install TA-Lib C library
      shell: bash -l {0}
      run: |
        echo "===== Installing TA-Lib C library ====="
        # Install build dependencies
        echo "Installing build dependencies..."
        sudo apt-get update
        sudo apt-get install -y build-essential wget pkg-config
        
        # Download and install TA-Lib C library
        echo "Downloading TA-Lib source..."
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        
        echo "Building and installing TA-Lib..."
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install
        cd ..
        
        # Update linker cache
        echo "Updating linker cache..."
        sudo ldconfig
        
        # Verify installation
        echo "Verifying installation..."
        find /usr -name "libta_lib*" || echo "No libta_lib files found in /usr"
        ls -la /usr/lib/libta_lib* || echo "No libta_lib files found in /usr/lib"
        
        # Set environment variables to help the linker find the library
        echo "Setting environment variables..."
        echo "LD_LIBRARY_PATH=/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "LIBRARY_PATH=/usr/lib:/usr/local/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "CPATH=/usr/include:$CPATH" >> $GITHUB_ENV
        
        # Create symbolic links if needed
        echo "Creating symbolic links for compatibility..."
        if [ -f "/usr/lib/libta_lib.so" ] && [ ! -f "/usr/lib/libta-lib.so" ]; then
          sudo ln -s /usr/lib/libta_lib.so /usr/lib/libta-lib.so
          echo "Created symbolic link from libta_lib.so to libta-lib.so"
        fi
        
        # Verify the library can be found by the linker
        echo "Checking if library can be found by the linker..."
        ldconfig -p | grep ta_lib || echo "TA-Lib not found in linker cache"
        
        echo "TA-Lib C library installation completed"
    
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        echo "===== Installing Python dependencies ====="
        
        # Try both approaches for TA-Lib installation
        echo "Installing TA-Lib from conda-forge as a fallback..."
        conda install -c conda-forge ta-lib
        
        # Upgrade pip and install base tools
        echo "Upgrading pip and installing base tools..."
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov pytest-asyncio
        pip install scikit-learn pandas numpy
        
        # Install RL dependencies
        echo "Installing RL dependencies..."
        pip install stable-baselines3[extra]
        
        # Install ML optimization dependencies
        echo "Installing ML optimization dependencies..."
        pip install optuna
        
        # Install all requirements from requirements-ci.txt first
        echo "Installing requirements from requirements-ci.txt..."
        pip install -r requirements-ci.txt
        
        # Install the package in editable mode with dev dependencies
        echo "Installing package in editable mode..."
        pip install -e .[dev]
        
        # Explicitly install the missing dependencies to ensure they're available
        echo "Installing additional dependencies..."
        pip install httpx ccxt langchain-openai textblob
        
        # Explicitly try to install ta-lib with debug output
        echo "Attempting to install ta-lib Python package directly..."
        pip install --verbose ta-lib
        
        # Verify imports
        echo "Verifying imports..."
        python -c "from alpha_pulse.models import ModelTrainer; print('ModelTrainer successfully imported')"
        
        # Verify the previously missing dependencies are installed
        python -c "import httpx; import ccxt; import langchain_openai; import textblob; print('All required dependencies successfully imported')"
        
        # Verify ta-lib can be imported
        echo "Verifying ta-lib import..."
        python -c "import talib; print('TA-Lib successfully imported')" || echo "Failed to import talib"
    
    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/alpha_pulse --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/alpha_pulse --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        # Show test directory structure
        echo "Test directory structure:"
        ls -R src/alpha_pulse/tests/
        
        pytest --cov-branch --cov-report=xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: blackms/AlphaPulse