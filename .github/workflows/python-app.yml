name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: alphapulse_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/alphapulse_test
      REDIS_URL: redis://localhost:6379
      EXCHANGE_API_KEY: test-api-key
      EXCHANGE_API_SECRET: test-api-secret
      OPENAI_API_KEY: test-openai-key
      ENVIRONMENT: test

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Set up Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Show Package Structure
      run: |
        # Show directory structure for debugging
        echo "Package structure:"
        ls -R src/alpha_pulse/
    
    # Install TA-Lib C library v0.6.4 from .deb package
    - name: Install TA-Lib C library v0.6.4
      run: |
        echo "===== Installing TA-Lib C library v0.6.4 from .deb ====="
        # Install dependencies for dpkg if needed (like wget)
        sudo apt-get update
        sudo apt-get install -y wget

        # Download and install TA-Lib C library v0.6.4 .deb
        wget https://github.com/ta-lib/ta-lib/releases/download/v0.6.4/ta-lib_0.6.4_amd64.deb -O ta-lib_0.6.4_amd64.deb
        sudo dpkg -i ta-lib_0.6.4_amd64.deb
        # Install any missing dependencies for the installed .deb
        sudo apt-get install -f -y

        echo "TA-Lib C library v0.6.4 installation completed via .deb"
    
    # Install Python dependencies with Poetry
    - name: Install dependencies with Poetry
      run: |
        echo "===== Installing Python dependencies with Poetry ====="
        poetry install --no-interaction
        
        # Verify the TA-Lib installation
        echo "Verifying TA-Lib installation..."
        poetry run python -c "import talib; print(f'TA-Lib version: {talib.__version__}'); print(f'Available functions: {dir(talib)[:5]}...')" || echo "Failed to import talib"
        
        # Verify the specific function that uses the missing symbol
        echo "Verifying TA-Lib AVGDEV function..."
        poetry run python -c "import talib; import numpy as np; data = np.random.random(100); result = talib.AVGDEV(data, timeperiod=5); print('AVGDEV function works!')" || echo "Failed to use AVGDEV function"
    
    # Dependencies are already installed by Poetry in the previous step
    - name: Verify dependencies
      run: |
        echo "===== Verifying Python dependencies ====="
        
        # Verify imports
        echo "Verifying imports..."
        poetry run python -c "from alpha_pulse.models import ModelTrainer; print('ModelTrainer successfully imported')"
        
        # Verify the dependencies are installed
        echo "Verifying dependencies..."
        poetry run python -c "import httpx; import ccxt; import langchain_openai; import textblob; import loguru; print('All required dependencies successfully imported')"
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 src/alpha_pulse --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        poetry run flake8 src/alpha_pulse --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        # Show test directory structure
        echo "Test directory structure:"
        ls -R src/alpha_pulse/tests/
        
        poetry run pytest --cov-branch --cov-report=xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: blackms/AlphaPulse