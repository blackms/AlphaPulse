name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      EXCHANGE_API_KEY: ${{ secrets.EXCHANGE_API_KEY }}
      EXCHANGE_API_SECRET: ${{ secrets.EXCHANGE_API_SECRET }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: "3.11"
        channels: conda-forge,defaults
        channel-priority: strict
        activate-environment: test-env
    
    - name: Setup Package Structure
      run: |
        # Create models directory and files
        mkdir -p src/alpha_pulse/models
        
        # Create __init__.py
        echo '''"""
        Machine learning models package for AlphaPulse.
        """
        from .basic_models import ModelTrainer
        __all__ = ["ModelTrainer"]
        ''' > src/alpha_pulse/models/__init__.py
        
        # Create basic_models.py
        echo '''"""
        Basic machine learning models for AlphaPulse.
        """
        from typing import Dict, Optional, Union
        from pathlib import Path
        from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier

        class ModelTrainer:
            def __init__(
                self,
                model_type: str = "random_forest",
                task: str = "regression",
                model_params: Optional[Dict] = None,
                model_dir: Optional[Union[str, Path]] = None
            ):
                self.model_type = model_type
                self.task = task
                self.model_params = model_params or {}
                self.model_dir = Path(model_dir) if model_dir else Path.cwd() / "models"
                self._model = None
                self._is_fitted = False
        ''' > src/alpha_pulse/models/basic_models.py
        
        # Show directory structure
        echo "Package structure:"
        ls -R src/alpha_pulse/
    
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        # Install TA-Lib from conda-forge
        conda install -c conda-forge ta-lib
        
        # Upgrade pip and install base tools
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov pytest-asyncio
        pip install scikit-learn pandas numpy
        
        # Install RL dependencies
        pip install stable-baselines3[extra]
        
        # Install the package in editable mode
        pip install -e .
        
        # Verify imports
        python -c "from alpha_pulse.models import ModelTrainer; print('ModelTrainer successfully imported')"
    
    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/alpha_pulse --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/alpha_pulse --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        # Show test directory structure
        echo "Test directory structure:"
        ls -R src/alpha_pulse/tests/
        
        # Run tests with verbose output
        pytest -v --showlocals
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}