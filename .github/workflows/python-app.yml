name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      EXCHANGE_API_KEY: ${{ secrets.EXCHANGE_API_KEY }}
      EXCHANGE_API_SECRET: ${{ secrets.EXCHANGE_API_SECRET }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: "3.11"
        channels: conda-forge,defaults
        channel-priority: strict
        activate-environment: test-env
    
    - name: Install dependencies
      shell: bash -l {0}
      run: |
        # Install TA-Lib from conda-forge
        conda install -c conda-forge ta-lib
        
        # Upgrade pip and install base tools
        python -m pip install --upgrade pip
        pip install flake8
        pip install numpy
        
        # Install RL dependencies
        pip install stable-baselines3
        
        # Debug: Show current directory structure
        echo "Current directory structure:"
        ls -R src/alpha_pulse/
        
        # Ensure package structure exists
        mkdir -p src/alpha_pulse/models
        
        # Create necessary __init__.py files
        echo "Creating __init__.py files..."
        echo '"""AlphaPulse package."""' > src/alpha_pulse/__init__.py
        echo '"""Models package."""' > src/alpha_pulse/models/__init__.py
        
        # Create basic_models.py with minimal content
        echo "Creating basic_models.py..."
        cat << 'EOF' > src/alpha_pulse/models/basic_models.py
"""Basic machine learning models."""
from typing import Dict, Optional, Union
from pathlib import Path

class ModelTrainer:
    def __init__(
        self,
        model_type: str = 'random_forest',
        task: str = 'regression',
        model_params: Optional[Dict] = None,
        model_dir: Optional[Union[str, Path]] = None
    ):
        self.model_type = model_type
        self.task = task
        self.model_params = model_params or {}
        self.model_dir = Path(model_dir) if model_dir else Path.cwd() / "models"
EOF
        
        # Debug: Show updated directory structure
        echo "Updated directory structure:"
        ls -R src/alpha_pulse/
        
        # Debug: Show content of basic_models.py
        echo "Content of basic_models.py:"
        cat src/alpha_pulse/models/basic_models.py
        
        # Install the package in editable mode with dev dependencies
        pip install -e ".[dev]"
        
        # Debug: Verify Python path
        echo "PYTHONPATH: $PYTHONPATH"
        
        # Debug: Try importing the module
        python -c "import sys; print('Python path:', sys.path); from alpha_pulse.models.basic_models import ModelTrainer; print('ModelTrainer found')"
    
    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/alpha_pulse --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/alpha_pulse --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        # Debug: Show test directory structure
        ls -R src/alpha_pulse/tests/
        
        # Run tests with verbose output
        PYTHONPATH=$PYTHONPATH pytest -v --showlocals
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}