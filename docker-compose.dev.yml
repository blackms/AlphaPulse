# Docker Compose for Local Development
# This provides a complete local development environment with all services

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: alphapulse-postgres-dev
    environment:
      POSTGRES_USER: alphapulse
      POSTGRES_PASSWORD: alphapulse
      POSTGRES_DB: alphapulse
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U alphapulse"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - alphapulse-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: alphapulse-redis-dev
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - alphapulse-network

  # HashiCorp Vault (dev mode)
  vault:
    image: hashicorp/vault:1.15
    container_name: alphapulse-vault-dev
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - alphapulse-network

  # AlphaPulse API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: alphapulse-api-dev
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=postgresql://alphapulse:alphapulse@postgres:5432/alphapulse
      - REDIS_URL=redis://redis:6379
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
      - PYTHONPATH=/app/src
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - alphapulse-network

  # Prometheus (monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: alphapulse-prometheus-dev
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - alphapulse-network

  # Grafana (dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: alphapulse-grafana-dev
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=alphapulse
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - alphapulse-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  alphapulse-network:
    driver: bridge
